<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_CO_NUTATE" Id="{1eae2c23-d186-449f-a296-fa0bbdbdf4fc}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_CO_NUTATE
VAR_INPUT
	jd:	LREAL;
	EQ_COORD_IN: S_SkyCoordEquatorial;
END_VAR
VAR_OUTPUT
	EQ_COORD_DIFF: S_SkyCoordEquatorial; // Return changes in ra and dec
	eps,			// TRUE obliquity OF the ecliptic in radians
	d_psi,			// in arcsec
	d_eps:	LREAL;
END_VAR
VAR
	T, 
	eps0,
ce, se,x,y,z,x2,y2,z2,rad,xyproj,ra2,dec2: LREAL;
	nutate:	FB_NUTATE;
END_VAR
VAR CONSTANT
	d2r:	LREAL := PI/180.0;
	d2as:	LREAL := PI/(180.0*3600.0);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// https://idlastro.gsfc.nasa.gov/ftp/pro/astro/co_nutate.pro
(*EXPLANATION:
;     Calculates necessary changes to ra and dec due to
;     the nutation of the Earth's rotation axis, as described in Meeus, Chap 23.
;     Uses formulae from Astronomical Almanac, 1984, and does the calculations
;     in equatorial rectangular coordinates to avoid singularities at the
;     celestial poles.*)
// Julian centuries FROM J2000 OF jd.
T := (jd -2451545.0)/36525.0; 

// must calculate obliquity OF ecliptic
nutate(jd := jd,
		nut_long => d_psi, 
		nut_obliq => d_eps); 

eps0 := 23.4392911*3600.0 - 46.8150*T - 0.00059*EXPT(T, 2) + 0.001813*EXPT(T, 3);
eps := (eps0 + d_eps)/3600.0*d2r; // TRUE obliquity OF the ecliptic in radians
 
//useful numbers
ce := COS(eps);
se := SIN(eps);

// convert ra-dec to equatorial rectangular coordinates
x := COS(EQ_COORD_IN.ra*d2r) * COS(EQ_COORD_IN.dec*d2r);
y := SIN(EQ_COORD_IN.ra*d2r) * COS(EQ_COORD_IN.dec*d2r);
z := SIN(EQ_COORD_IN.dec*d2r);

// apply corrections to each rectangular coordinate
x2 := x - (y*ce + z*se)*d_psi * d2as;
y2 := y + (x*ce*d_psi - z*d_eps) * d2as;
z2 := z + (x*se*d_psi + y*d_eps) * d2as;

// convert back to equatorial spherical coordinates
rad := SQRT(x2*x2 + y2*y2 + z2*z2);
xyproj := SQRT(x2*x2 + y2*y2);

ra2  := x2 * 0.0;
dec2 := x2 * 0.0;

// Calculate Ra and Dec in RADIANS (later convert to DEGREES)
IF (xyproj = 0) AND (z <> 0) THEN
	// places where xyproj=0 (point at NCP or SCP)
	dec2 := ASIN(z2/rad);
	ra2 := 0.0;
END_IF
 
IF (xyproj <> 0) THEN
	// places other than NCP or SCP
	ra2 := ATAN2(y2, x2);
	dec2 := ASIN(z2/rad);
END_IF

// convert to DEGREES

ra2 := ra2 /d2r;
dec2 := dec2 /d2r;

ra2 := MODABS(ra2, 360.0);


// Return changes in ra and dec
EQ_COORD_DIFF.ra := (ra2 - EQ_COORD_IN.ra);
EQ_COORD_DIFF.dec := (dec2 - EQ_COORD_IN.dec);
]]></ST>
    </Implementation>
    <LineIds Name="FB_CO_NUTATE">
      <LineId Id="80" Count="0" />
      <LineId Id="82" Count="4" />
      <LineId Id="81" Count="0" />
      <LineId Id="3" Count="55" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>