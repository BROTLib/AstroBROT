<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_EQ2HOR" Id="{2aaa455b-6325-4dbe-b61c-a8cfdf369fe1}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_EQ2HOR
VAR_INPUT
	// right ascension in degrees
	alpha: LREAL;
	// declination in degrees
	delta: LREAL;
	jd: 		LREAL;					// Julian Date
	// longitude in degrees
	lon: LREAL;
	// latitude in degrees
	lat: LREAL;
	ws:			BOOL := FALSE; 			// Set this to TRUE get the azimuth measured westward FROM south (NOT East of North).
	precess:	BOOL := TRUE; 			// Set this to 1 to force precession [default], 0 for no precession correction
	nutate:		BOOL := TRUE; 			// Set this to 1 to force nutation [default], 0 for no nutation correction.
	aberration:	BOOL := TRUE; 			// Set this to 1 to force aberration correction [default], 0 for no correction.
	refract:	BOOL := TRUE; 			// Set to 1 to force refraction correction[default] (for actual sky coord), 0 for no correction (for theoretical coord).
END_VAR
VAR_OUTPUT
	// altitude in degrees
	alt: LREAL;
	// azimuth in degrees
	az: LREAL;
	// hour angle in degreesss
	ha: LREAL;
END_VAR
VAR
	tstart, J_now:		LREAL;
	lmst:				LREAL;
	last:				LREAL;
	d_psi:				LREAL;
	eps:				LREAL;
	fbprecess: 			FB_PRECESS;
	hadec2altaz:		FB_HADEC2ALTAZ;
	co_nutate: 			FB_CO_NUTATE;
	co_aberration:		FB_CO_ABERRATION;
	co_refract:			FB_CO_REFRACT;
	//precessed coordinates
	alpha1, delta1:	LREAL;	
	d_ra_abr, d_dec_abr: LREAL;
	d_ra_nut, d_dec_nut: LREAL;
END_VAR
VAR CONSTANT
	// easier then functions
	d2r:	LREAL := PI/180.0;
	h2r:	LREAL := PI/12.0;
	jd2000: LREAL := 2451545.0;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* source https://idlastro.gsfc.nasa.gov/ftp/pro/astro/eq2hor.pro 

PURPOSE:
	Convert celestial  (ra-dec) coords to local horizon coords (alt-az).

DESCRIPTION:
This  code calculates horizon (alt,az) coordinates from equatorial
(ra,dec) coords. It is typically accurate to about 1 arcsecond or better (I
have checked the output against the publicly available XEPHEM software). It
performs precession, nutation, aberration, and refraction corrections. [...]
*)


tstart := 2000.0;

(* ******************************************************************************
 PRECESS coordinates to current date
 (uses astro lib procedure PRECESS.pro)
*)
J_now := (JD - jd2000)/365.25 + 2000.0; // compute current equinox
IF precess THEN
	fbprecess( 
		ra := alpha, 
		dec := delta, 
		equinox1 := tstart, 
		equinox2 := J_now, 
		ra_precessed => alpha1, 
		dec_precessed => delta1);
ELSE
	alpha1 := alpha;
	delta1 := delta;
END_IF

(******************************************************************************
 calculate NUTATION and ABERRATION Corrections to Ra-Dec 
*)

IF nutate THEN
	co_nutate(	
		jd := jd, 
		ra := alpha1, 
		dec := delta1, 
		d_ra => d_ra_nut, 
		d_dec => d_dec_nut,
		eps=>eps, 
		d_psi=>d_psi);
END_IF

IF ABERRATION THEN	
	co_aberration(	
		jd := jd, 
		ra := alpha1, 
		dec := delta1, 
		d_ra => d_ra_abr, 
		d_dec => d_dec_nut,
		eps := eps);	
END_IF
alpha := alpha + d_ra_abr + d_ra_nut;
delta := delta + d_dec_abr + d_dec_nut;

(***************************************************************************************
Calculate LOCAL MEAN SIDEREAL TIME *)
lmst := jd2lst(JD:=jd, lon:=lon);
// calculate local APPARENT sidereal time
last := lmst + d_psi *COS(eps)/3600.0 ; //add correction in degrees

(******************************************************************************
 Find hour angle (in DEGREES) *)
ha := last - alpha;
ha := MODABS(ha, 360.0);

(*******************************************************************************
 Now do the spherical trig to get APPARENT alt,az. *)
hadec2altaz(	
	ha := ha, 
	dec := delta, 
	lat := lat, 
	alt => alt, 
	az => az, 
	WS := WS);

(********************************************************************************************
 Make Correction for ATMOSPHERIC REFRACTION
 (use this for visible and radio wavelengths; author is unsure about other wavelengths.
  See the comments in CO_REFRACT for more details.) *)
IF refract THEN 
	co_refract(	
		old_alt := alt, 
		altitude := lat, 
		to_observed := TRUE, 
		new_alt => alt);
END_IF
]]></ST>
    </Implementation>
    <LineIds Name="FB_EQ2HOR">
      <LineId Id="3" Count="8" />
      <LineId Id="16" Count="2" />
      <LineId Id="21" Count="9" />
      <LineId Id="177" Count="1" />
      <LineId Id="31" Count="0" />
      <LineId Id="179" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="251" Count="3" />
      <LineId Id="33" Count="7" />
      <LineId Id="182" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="184" Count="2" />
      <LineId Id="45" Count="1" />
      <LineId Id="49" Count="2" />
      <LineId Id="57" Count="0" />
      <LineId Id="187" Count="5" />
      <LineId Id="60" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="62" Count="2" />
      <LineId Id="66" Count="10" />
      <LineId Id="195" Count="0" />
      <LineId Id="77" Count="2" />
      <LineId Id="202" Count="0" />
      <LineId Id="81" Count="7" />
      <LineId Id="203" Count="0" />
      <LineId Id="89" Count="3" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>