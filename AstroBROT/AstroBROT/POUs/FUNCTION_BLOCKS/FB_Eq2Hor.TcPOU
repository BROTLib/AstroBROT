<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="FB_EQ2HOR" Id="{2aaa455b-6325-4dbe-b61c-a8cfdf369fe1}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_EQ2HOR
VAR_INPUT
	ra				: LREAL;	// right ascension in degrees
	dec				: LREAL;	// declination in degrees
	jd				: LREAL;	// Julian Date
	lon				: LREAL;	// longitude in degrees
	lat				: LREAL;	// latitude in degrees
	ws				: BOOL := FALSE; 	// Set this to TRUE get the azimuth measured westward FROM south (NOT East of North).
	precess			: BOOL := TRUE; 	// Set this to 1 to force precession [default], 0 for no precession correction
	nutate			: BOOL := TRUE; 	// Set this to 1 to force nutation [default], 0 for no nutation correction.
	aberration		: BOOL := TRUE; 	// Set this to 1 to force aberration correction [default], 0 for no correction.
	refract 		: BOOL := TRUE; 	// Set to 1 to force refraction correction[default] (for actual sky coord), 0 for no correction (for theoretical coord).
	refract_to_observed : BOOL := TRUE;
	altitude		: LREAL := 0.0;
END_VAR
VAR_OUTPUT
	alt				: LREAL;		// altitude in degrees
	az				: LREAL;		// azimuth in degrees
	ha				: LREAL;		// hour angle in degreesss
END_VAR
VAR
	tstart, J_now	: LREAL;
	lmst			: LREAL;
	last			: LREAL;
	d_psi			: LREAL;
	eps				: LREAL;
	fbprecess		: FB_PRECESS;
	hadec2altaz		: FB_HADEC2ALTAZ;
	co_nutate		: FB_CO_NUTATE;
	co_aberration	: FB_CO_ABERRATION;
	co_refract		: FB_CO_REFRACT;
	ra_pre			: LREAL;		// Precessed RA in degrees
	dec_pre			: LREAL;		// Precessed Dec in degrees
	d_ra_abr		: LREAL;		// Difference in RA due to aberration
	d_dec_abr		: LREAL;		// Difference in Dec due to aberration
	d_ra_nut		: LREAL;		// Difference in RA due to nutation
	d_dec_nut		: LREAL;		// Difference in Dec due to nutation
END_VAR
VAR CONSTANT
	// easier then functions
	d2r				: LREAL := PI/180.0;
	h2r				: LREAL := PI/12.0;
	jd2000			: LREAL := 2451545.0;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* source https://github.com/wlandsman/IDLAstro/blob/master/pro/eq2hor.pro 

PURPOSE:
	Convert celestial  (ra-dec) coords to local horizon coords (alt-az).

DESCRIPTION:
This  code calculates horizon (alt,az) coordinates from equatorial
(ra,dec) coords. It is typically accurate to about 1 arcsecond or better (I
have checked the output against the publicly available XEPHEM software). It
performs precession, nutation, aberration, and refraction corrections. [...]
*)


tstart := 2000.0;

(* ******************************************************************************
 PRECESS coordinates to current date
 (uses astro lib procedure PRECESS.pro)
*)
J_now := (JD - jd2000)/365.25 + 2000.0; // compute current equinox
IF precess THEN
	fbprecess( 
		ra := ra, 
		dec := dec, 
		equinox1 := tstart, 
		equinox2 := J_now, 
		ra_precessed => ra_pre, 
		dec_precessed => dec_pre);
ELSE
	ra_pre := ra;
	dec_pre := dec;
END_IF

(******************************************************************************
 calculate NUTATION and ABERRATION Corrections to Ra-Dec 
*)

IF nutate THEN
	co_nutate(	
		jd := jd, 
		ra := ra_pre, 
		dec := dec_pre, 
		d_ra => d_ra_nut, 
		d_dec => d_dec_nut,
		eps=>eps, 
		d_psi=>d_psi);
END_IF

IF ABERRATION THEN	
	co_aberration(	
		jd := jd, 
		ra := ra_pre, 
		dec := dec_pre, 
		d_ra => d_ra_abr, 
		d_dec => d_dec_abr,
		eps := eps);	
END_IF
ra := ra_pre + d_ra_abr + d_ra_nut;
dec := dec_pre + d_dec_abr + d_dec_nut;

(***************************************************************************************
Calculate LOCAL MEAN SIDEREAL TIME *)
lmst := jd2lst(JD:=jd, lon:=lon);
// calculate local APPARENT sidereal time
last := lmst + d_psi *COS(eps)/3600.0 ; //add correction in degrees

(******************************************************************************
 Find hour angle (in DEGREES) *)
ha := last - ra;
ha := MODABS(ha, 360.0);

(*******************************************************************************
 Now do the spherical trig to get APPARENT alt,az. *)
hadec2altaz(	
	ha := ha, 
	dec := dec, 
	lat := lat, 
	alt => alt, 
	az => az, 
	WS := WS);

(********************************************************************************************
 Make Correction for ATMOSPHERIC REFRACTION
 (use this for visible and radio wavelengths; author is unsure about other wavelengths.
  See the comments in CO_REFRACT for more details.) *)
IF refract THEN 
	co_refract(	
		old_alt := alt, 
		altitude := altitude, 
		to_observed := refract_to_observed, 
		new_alt => alt);
END_IF
]]></ST>
    </Implementation>
    <LineIds Name="FB_EQ2HOR">
      <LineId Id="752" Count="91" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>